#ifdef _PHASER_LIB_
#include "hcpp-utils.h"
namespace hcpp { 
  using namespace std; 
  void asyncPhased(std::function<void()> &&lambda) {
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda); 
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, NO_PHASER, PHASER_TRANSMIT_ALL); 
  } 
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, std::function<void()> &&lambda) {
    int total = 1;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, std::function<void()> &&lambda) {
    int total = 2;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, std::function<void()> &&lambda) {
    int total = 3;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, std::function<void()> &&lambda) {
    int total = 4;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, std::function<void()> &&lambda) {
    int total = 5;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, std::function<void()> &&lambda) {
    int total = 6;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, std::function<void()> &&lambda) {
    int total = 7;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, std::function<void()> &&lambda) {
    int total = 8;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, std::function<void()> &&lambda) {
    int total = 9;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, std::function<void()> &&lambda) {
    int total = 10;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, std::function<void()> &&lambda) {
    int total = 11;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, std::function<void()> &&lambda) {
    int total = 12;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, std::function<void()> &&lambda) {
    int total = 13;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, std::function<void()> &&lambda) {
    int total = 14;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, PHASER_t* ph14, PHASER_m m14, std::function<void()> &&lambda) {
    int total = 15;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    phaser_type_arr[14] = *ph14; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phaser_mode_arr[14] = m14; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, PHASER_t* ph14, PHASER_m m14, PHASER_t* ph15, PHASER_m m15, std::function<void()> &&lambda) {
    int total = 16;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    phaser_type_arr[14] = *ph14; 
    phaser_type_arr[15] = *ph15; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phaser_mode_arr[14] = m14; 
    phaser_mode_arr[15] = m15; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, PHASER_t* ph14, PHASER_m m14, PHASER_t* ph15, PHASER_m m15, PHASER_t* ph16, PHASER_m m16, std::function<void()> &&lambda) {
    int total = 17;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    phaser_type_arr[14] = *ph14; 
    phaser_type_arr[15] = *ph15; 
    phaser_type_arr[16] = *ph16; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phaser_mode_arr[14] = m14; 
    phaser_mode_arr[15] = m15; 
    phaser_mode_arr[16] = m16; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, PHASER_t* ph14, PHASER_m m14, PHASER_t* ph15, PHASER_m m15, PHASER_t* ph16, PHASER_m m16, PHASER_t* ph17, PHASER_m m17, std::function<void()> &&lambda) {
    int total = 18;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    phaser_type_arr[14] = *ph14; 
    phaser_type_arr[15] = *ph15; 
    phaser_type_arr[16] = *ph16; 
    phaser_type_arr[17] = *ph17; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phaser_mode_arr[14] = m14; 
    phaser_mode_arr[15] = m15; 
    phaser_mode_arr[16] = m16; 
    phaser_mode_arr[17] = m17; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, PHASER_t* ph14, PHASER_m m14, PHASER_t* ph15, PHASER_m m15, PHASER_t* ph16, PHASER_m m16, PHASER_t* ph17, PHASER_m m17, PHASER_t* ph18, PHASER_m m18, std::function<void()> &&lambda) {
    int total = 19;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    phaser_type_arr[14] = *ph14; 
    phaser_type_arr[15] = *ph15; 
    phaser_type_arr[16] = *ph16; 
    phaser_type_arr[17] = *ph17; 
    phaser_type_arr[18] = *ph18; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phaser_mode_arr[14] = m14; 
    phaser_mode_arr[15] = m15; 
    phaser_mode_arr[16] = m16; 
    phaser_mode_arr[17] = m17; 
    phaser_mode_arr[18] = m18; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
  void asyncPhased(PHASER_t* ph0, PHASER_m m0, PHASER_t* ph1, PHASER_m m1, PHASER_t* ph2, PHASER_m m2, PHASER_t* ph3, PHASER_m m3, PHASER_t* ph4, PHASER_m m4, PHASER_t* ph5, PHASER_m m5, PHASER_t* ph6, PHASER_m m6, PHASER_t* ph7, PHASER_m m7, PHASER_t* ph8, PHASER_m m8, PHASER_t* ph9, PHASER_m m9, PHASER_t* ph10, PHASER_m m10, PHASER_t* ph11, PHASER_m m11, PHASER_t* ph12, PHASER_m m12, PHASER_t* ph13, PHASER_m m13, PHASER_t* ph14, PHASER_m m14, PHASER_t* ph15, PHASER_m m15, PHASER_t* ph16, PHASER_m m16, PHASER_t* ph17, PHASER_m m17, PHASER_t* ph18, PHASER_m m18, PHASER_t* ph19, PHASER_m m19, std::function<void()> &&lambda) {
    int total = 20;
    PHASER_t* phaser_type_arr = new PHASER_t[total]; 
    phaser_type_arr[0] = *ph0; 
    phaser_type_arr[1] = *ph1; 
    phaser_type_arr[2] = *ph2; 
    phaser_type_arr[3] = *ph3; 
    phaser_type_arr[4] = *ph4; 
    phaser_type_arr[5] = *ph5; 
    phaser_type_arr[6] = *ph6; 
    phaser_type_arr[7] = *ph7; 
    phaser_type_arr[8] = *ph8; 
    phaser_type_arr[9] = *ph9; 
    phaser_type_arr[10] = *ph10; 
    phaser_type_arr[11] = *ph11; 
    phaser_type_arr[12] = *ph12; 
    phaser_type_arr[13] = *ph13; 
    phaser_type_arr[14] = *ph14; 
    phaser_type_arr[15] = *ph15; 
    phaser_type_arr[16] = *ph16; 
    phaser_type_arr[17] = *ph17; 
    phaser_type_arr[18] = *ph18; 
    phaser_type_arr[19] = *ph19; 
    PHASER_m* phaser_mode_arr = new PHASER_m[total]; 
    phaser_mode_arr[0] = m0; 
    phaser_mode_arr[1] = m1; 
    phaser_mode_arr[2] = m2; 
    phaser_mode_arr[3] = m3; 
    phaser_mode_arr[4] = m4; 
    phaser_mode_arr[5] = m5; 
    phaser_mode_arr[6] = m6; 
    phaser_mode_arr[7] = m7; 
    phaser_mode_arr[8] = m8; 
    phaser_mode_arr[9] = m9; 
    phaser_mode_arr[10] = m10; 
    phaser_mode_arr[11] = m11; 
    phaser_mode_arr[12] = m12; 
    phaser_mode_arr[13] = m13; 
    phaser_mode_arr[14] = m14; 
    phaser_mode_arr[15] = m15; 
    phaser_mode_arr[16] = m16; 
    phaser_mode_arr[17] = m17; 
    phaser_mode_arr[18] = m18; 
    phaser_mode_arr[19] = m19; 
    phased_t phased;
    phased.count = total;
    phased.phasers = phaser_type_arr;
    phased.phasers_mode = phaser_mode_arr;
    std::function<void()> * copy_of_lambda = new std::function<void()> (lambda);
    ::async(&async_cpp_wrapper, (void *)copy_of_lambda, NO_DDF, &phased, NO_PROP);
  }
}
#endif // _PHASER_LIB_
